import { Composer, InlineKeyboard } from "grammy";
import { TaskComposerConversation, TaskContext, TaskConversation } from "../commons/context.types";
import { TasksService } from "../services/tasks.service";
import { createConversation } from "@grammyjs/conversations";
import { DataTask } from "../commons/types";
import dedent from "dedent";


export const tasksComposer = new Composer<TaskComposerConversation>();
const tasksService = new TasksService();

tasksComposer.use(async (ctx, next) => {
  if (!ctx.session.tasks) {
    ctx.session.tasks = {
      currentPage: 0,
      totalPages: 0,
      tasks: []
    }
  }
  await next();
})

const tasksInlineKeyboard = new InlineKeyboard()
  .text("–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á", "get_tasks").row()
  .text("–ü–æ–∏—Å–∫ –ø–æ id", "search_by_id").row()
  .text("–ü–æ–∏—Å–∫ –ø–æ —Å—Ç–∞—Ç—É—Å—É", "search_by_status").row()
  .text("–ü–æ–∏—Å–∫ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É", "search_by_priority").row()

async function getTasks(_: TaskConversation, ctx: TaskContext) {
  try {
    ctx.session.tasks.currentPage = 0;
    const dateTask: DataTask = {
      tgID: ctx.from.id
    };
    ctx.session.tasks.tasks = await tasksService.getActiveTasks(dateTask) || [];
    ctx.session.tasks.totalPages = ctx.session.tasks.tasks.length;
    await ctx.reply("–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:", {
      reply_markup: listTask(ctx),
    });
  } catch (error) {
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á.");
  }
};
tasksComposer.use(createConversation(getTasks));

function listTask(ctx: TaskContext) {
  const tasksOnPage = 10;
  const { tasks } = ctx.session;
  const currentPage = tasks.currentPage || 0;

  const startIndex = currentPage * tasksOnPage;
  const endIndex = startIndex + tasksOnPage;
  const tasksForPage = tasks.tasks.slice(startIndex, endIndex);

  const taskKeyboard = new InlineKeyboard();

  tasksForPage.forEach((task, index) => {
    if (index % 2 === 0) {
      taskKeyboard.text(`${task.title}`, `view_task_${task.id}`).row();
    } else {
      taskKeyboard.text(`${task.title}`, `view_task_${task.id}`);
    }
  });

  taskKeyboard.row();
  const totalPages = ctx.session.tasks.totalPages;

  if (currentPage > 0) {
    taskKeyboard.text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", `tasks_prev_page`);
  }
  if (currentPage < totalPages - 1) {
    taskKeyboard.text("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", `tasks_next_page`);
  }

  return taskKeyboard;
}

async function getTaskById(conv: TaskConversation, ctx: TaskContext) {
  await ctx.reply("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:");
  const taskId = (await conv.waitFor("message:text")).message.text.trim();

  if (!taskId) {
    await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏.");
    return;
  }
  try {
    const dataTask: DataTask = {
      tgID: ctx.from.id,
      id: parseInt(taskId)
    };
    const task = await tasksService.getTaskById(dataTask);
    if (task) {
      let msg = dedent`
      üìù –ó–∞–¥–∞—á–∞ #${task.id}\n
      –ù–∞–∑–≤–∞–Ω–∏–µ: ${task.title || '-'}\n
      –û–ø–∏—Å–∞–Ω–∏–µ: ${task.description || '-'}\n
      –°—Ç–∞—Ç—É—Å: ${task.status || '-'}\n
      –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${task.priority || '-'}\n`;
      const attachments = task.attachments || [];
      await ctx.reply(msg, {
        parse_mode: "MarkdownV2",
      });
      if (attachments.length > 0) {
        await ctx.reply("üìé –í–ª–æ–∂–µ–Ω–∏—è:");
        for (const attachment of attachments) {
          await ctx.replyWithDocument(attachment.path);
        }
      }
    } else {
      await ctx.reply("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
    }
  } catch (error) {
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.");
  }
};
tasksComposer.use(createConversation(getTaskById));

tasksComposer.on("callback_query:data", async (ctx, next) => {
  const data = ctx.callbackQuery.data;

  switch (data) {
    case "tasks_start":
      await ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏!", {
        reply_markup: tasksInlineKeyboard,
      });
      break;
    case "get_tasks":
      await ctx.conversation.enter("getTasks");
      break;
    case "view_task":
      await ctx.reply("–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á–∏ –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.");
      break;
    case "tasks_prev_page":
      if (ctx.session.tasks.currentPage > 0) {
        ctx.session.tasks.currentPage--;
      }
      await ctx.editMessageReplyMarkup({
        reply_markup: listTask(ctx)
      });
      break;
    case "tasks_next_page":
      if (ctx.session.tasks.currentPage < ctx.session.tasks.totalPages - 1) {
        ctx.session.tasks.currentPage++;
      }
      await ctx.editMessageReplyMarkup({
        reply_markup: listTask(ctx)
      });
      break;
    default:
      if (data.startsWith("view_task_")) {
        const taskId = data.replace("view_task_", "");
        await ctx.reply(`–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á–∏ #${taskId} –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.`);
      } else {
        await ctx.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.");
      }
      break;
  }

  await next();
});